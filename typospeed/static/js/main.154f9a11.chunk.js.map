{"version":3,"sources":["image/icon.png","components/UserInput.js","components/StartButton.js","components/ResetButton.js","components/API/FetchQuote.js","components/Timer.js","components/TextGenerator.js","App.js","index.js"],"names":["module","exports","UserInput","props","rows","cols","onChange","onInputchange","value","placeholder","StartButton","id","type","onClick","ResetButton","a","fetch","data","json","FetchQuote","Timer","min","slice","sec","TextGenerator","state","quote","character","clearinterval","wordpermin","isfirst","bind","time","getQuote","this","setState","event","className","userquote","target","userindex","length","index","isfinish","i","push","key","toString","clearInterval","word","split","Math","floor","setInterval","prevstate","React","Component","App","src","icon","height","alt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.154f9a11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.ae42a6ce.png\";","import React  from 'react';\r\nimport \"./UserInput.css\";\r\n\r\n\r\nfunction UserInput (props)\r\n{\r\n\t\t return (\r\n\t\t \t\t\t<>\r\n\t\t \t\t\t\t<textarea  rows=\"9\" cols=\"40\" onChange={props.onInputchange} value={props.value} placeholder=\"Start typing by pressing Start button\"></textarea>\r\n\t\t \t\t\t</> \r\n\t\t \t\t)\r\n }\r\n\r\n\r\nexport default UserInput;\r\n","import React  from 'react';\r\nimport \"./StartButton.css\";\r\n\r\n\r\nfunction StartButton (props)\r\n{\r\n\t\t return (\r\n\t\t \t\t\t<>\r\n\t\t \t\t\t\t<input  id=\"start\" type=\"button\" onClick={props.onClick} value=\"Start\"/>\r\n\t\t \t\t\t</> \r\n\t\t \t\t)\r\n }\r\n\r\n\r\nexport default StartButton;\r\n","import React  from 'react';\r\nimport \"./ResetButton.css\";\r\n\r\n\r\nfunction ResetButton (props)\r\n{\r\n\t\t return (\r\n\t\t \t\t\t<>\r\n\t\t \t\t\t\t<input id=\"reset\"  type=\"button\" onClick={props.onClick} value=\"Reset\"/>\r\n\t\t \t\t\t</> \r\n\t\t \t\t)\r\n }\r\n\r\n\r\nexport default ResetButton;\r\n","\r\nasync function FetchQuote (props)\r\n{\r\n\t\t\r\n\tlet link=\"https://api.quotable.io/random\";\r\n\tlet data =await fetch(link);\r\n\tdata=await data.json();\r\n\treturn data[\"content\"]\r\n }\r\n\r\n\r\nexport default FetchQuote;\r\n","import React  from 'react';\r\n\r\n\r\n\r\nfunction Timer (props)\r\n{\r\n\t\t//add zero and slice last two element\r\n\t\tlet min=(\"0\"+props.min).slice(-2);\r\n\t\tlet sec=(\"0\"+props.sec).slice(-2);\r\n\r\n\t\t return (\r\n\t\t \t\t\t<>\r\n\t\t \t\t\t\t<p>{min}:{sec}</p>\r\n\t\t \t\t\t</> \r\n\t\t \t\t)\r\n }\r\n\r\n\r\nexport default Timer;\r\n","import React  from 'react';\r\nimport \"./TextGenerator.css\";\r\n\r\nimport UserInput from \"./UserInput\";\r\nimport StartButton from \"./StartButton\";\r\nimport ResetButton from \"./ResetButton\";\r\nimport FetchQuote from \"./API/FetchQuote\"\r\nimport Timer from \"./Timer\"\r\n\r\nclass TextGenerator extends React.Component{\r\n\tconstructor (props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state=\t{\r\n\t\t\t\t\t\t  quote:\"Fetching....\",\r\n\t\t\t\t\t\t  character:\"Fetching....\",\r\n\t\t\t\t\t\t  value:\"\",\r\n\t\t\t\t\t\t  sec:0,\r\n\t\t\t\t\t\t  min:0\r\n\t\t\t\t\t};\r\n\t\r\n\t\tthis.clearinterval=\"\";\r\n\t\tthis.wordpermin=0;\r\n\t\tthis.isfirst=true;\r\n\t\t//binding the function \r\n\t\tthis.onInputchange=this.onInputchange.bind(this);\r\n\t\tthis.onClick=this.onClick.bind(this);\r\n\t\tthis.time=this.time.bind(this);\r\n\t\tthis.getQuote=this.getQuote.bind(this);\r\n\t\t\r\n\t}\r\n\t componentDidMount()\r\n\t{\r\n\t\t//once component mount get the quote \r\n\t\t this.getQuote();\r\n\t}\r\n   \tasync getQuote()\r\n    {\r\n    \t //getting the quote and store it on state\r\n    \t let quote=await FetchQuote();\r\n\t\t this.setState({quote:quote,character:quote,value:\"\"})\r\n    }\r\n    onInputchange(event)\r\n\t{\r\n\t\t//userenter quote len\r\n\t\tlet userquote=event.target.value;\r\n\r\n\t\t//user quote length\r\n\t\tlet userindex=userquote.length;\r\n\t\t//our generated quote length\r\n\t\tlet index=this.state.quote.length;\r\n\t\t//to store the span tag \r\n\t\tlet character=[]\r\n\t\t//to store class name\r\n\t\tlet className;\r\n\t\t//to find if user is finish\r\n\t\tlet isfinish=true;\r\n\t\t//iterating the  generated quote\r\n\t\tfor(let i=0;i<index; i<i++)\r\n\t\t{\r\n\t\t\t//if user enter char and  generated quote is equal \r\n\t\t   if(userquote[i]===this.state.quote[i])\r\n\t\t\t{\r\n\t\t\t\tclassName=\"goodentry\";\r\n\t\t\t}\r\n\t\t\t//if user enter char and  generated quote is not equal\r\n\t\t\telse if(userquote[i]!==this.state.quote[i] && userindex>i)\r\n\t\t\t{\r\n\t\t\t\tclassName=\"badentry\";\r\n\t\t\t\tisfinish=false;\r\n\t\t\t}\r\n\t\t\t//if none add span with char \r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tclassName=\"\"\r\n\t\t\t\tisfinish=false;\r\n\t\t\t}\r\n\t\t\tcharacter.push(<span \r\n\t\t\t\t\t\t\t\tkey={i.toString()} \r\n\t\t\t\t\t\t\t\tclassName={className}\r\n\t\t\t\t\t\t\t   >\r\n\t\t\t\t\t\t\t\t{this.state.quote[i]}\r\n\t\t\t\t\t\t\t\t</span>);\r\n\t\t}\r\n\r\n\t\t// check if he finsih and the timer is on\r\n\t\tif(isfinish && (this.state.min || this.state.sec))\t\r\n\t\t{\r\n\r\n\t\t\tclearInterval(this.clearinterval);\r\n\t\t\tif(this.state.min )\r\n\t\t\t{\r\n\t\t\t\tvar sec=this.state.min*60;\r\n\t\t\t\tvar min=(sec+this.state.sec)/60;\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t min=(this.state.sec)/60;\t\r\n\t\t\t}\r\n\t\t\t//converting sec to min \r\n\t\t\tlet word=this.state.quote.split(\" \").length //finding the no of word \r\n\t\t\tthis.wordpermin= Math.floor((word/min)); //calc the word per min \r\n\r\n\t\t}\r\n\t\tthis.setState({character:character,value:userquote})\r\n\t}\r\n\t//start\r\n\tonClick(event)\r\n\t{\r\n\t\t/*\r\n\r\n\t\t if user clicked start button for first time and the timer is not running\r\n\t\t isfirst is used to avoid run timer fast because when user click fastly\r\n\t\t start button more than twice it cause the state to update late so the \r\n\t\t new  timer is created it cause run timer fast so to avoid is first is used \r\n\r\n\t\t */\r\n\r\n\t\tif(!this.state.sec && event.target.value===\"Start\" && this.isfirst)\r\n\t\t{\r\n\t\t//setting the interval for every sec \r\n\t\tthis.clearinterval=setInterval(this.time,1000);\r\n\t\tthis.isfirst=false;\r\n\t\t}\r\n\t\t\r\n\r\n\t\t//if reset button clicked or the start button is clicked while timer is running \r\n\t\telse \r\n\t\t{\r\n\t\t\t//setting back the isfirst to true \r\n\t\t\tthis.isfirst=true;\r\n\t\t\t//getting new qoute\r\n\t\t\tthis.getQuote();\r\n\t\t\t//clear the interval and timer if user press reset while the timer is running\r\n\t\t\tclearInterval(this.clearinterval);\r\n\t\t\tthis.setState({min:0,sec:0 ,quote:\"Fetching....\",character:\"Fetching....\"});\r\n\t\t\tthis.wordpermin=0;\r\n\r\n\t\t}\r\n\t}\r\n\t\r\n\ttime()\r\n\t{\r\n\t\t\tif(this.state.sec===60)\r\n\t\t\t{\r\n\t\t\t\t//increment  min by 1 if sec=60\r\n\t\t\t\tthis.setState((prevstate)=>{\r\n\t\t\t\treturn {sec:0,min:prevstate.min+1}\r\n\t\t\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t\t//increment  sec by 1 \r\n\t\t\t\t\tthis.setState((prevstate)=>{\r\n\t\t\t\t\t\treturn {sec:prevstate.sec+1}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\trender()\r\n\t{\r\n\t \treturn(\r\n\t \t\t\t<div id=\"container\">\r\n\t \t\t\t<p id=\"quote\">{this.state.character}</p>\r\n\r\n\t \t\t\t<div id=\"mini-container\">\r\n\r\n\t \t\t\t<Timer min={this.state.min} sec={this.state.sec}/>\r\n\t \t\t\t<StartButton  onClick={this.onClick}/>\r\n\t \t\t\t<p>{this.wordpermin}WPM</p>\r\n\r\n\t \t\t\t</div>\r\n\t \t\t\t\r\n\t \t\t\t<UserInput  onInputchange={this.onInputchange} value={this.state.value}/>\r\n\t \t\t\t<ResetButton  onClick={this.onClick}/>\r\n\t \t\t\t</div>\r\n\t \t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default TextGenerator;\r\n\r\n","import React  from 'react';\nimport icon from './image/icon.png';\nimport TextGenerator from \"./components/TextGenerator\";\nimport './App.css';\n\n\nclass App extends React.Component{\n \trender()\n\t\t\t{\n\t\t\t\treturn\t(\n\t\t\t\t\t\t\t<>\n\n\t\t\t\t\t\t\t<div id=\"title\"><span>TypoSpeed</span><img src={icon} height=\"50px\" alt=\"icon\"/></div>\n\n\t\t\t\t\t\t\t<TextGenerator/>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t}\n}\nif(module.hot)\n{\n\tmodule.hot.accept();\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}