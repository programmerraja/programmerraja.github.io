<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Blog</title>
    <link>https://programmerraja.github.io/blog/</link>
    <description>Recent content on My Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 2024 08:19:32 +0530</lastBuildDate><atom:link href="https://programmerraja.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes</title>
      <link>https://programmerraja.github.io/blog/notes/2023/kubernetes/</link>
      <pubDate>Mon, 01 Jan 2024 08:19:32 +0530</pubDate>
      
      <guid>https://programmerraja.github.io/blog/notes/2023/kubernetes/</guid>
      
      <description>Kubernetes is two things A cluster for running applications An orchestrator of cloud-native microservices apps Kubernetes cluster A Kubernetes cluster contains six main components:
API server: Exposes a REST interface to all Kubernetes resources. Serves as the front end of the Kubernetes control plane. Scheduler: Places containers according to resource requirements and metrics. Makes note of Pods with no assigned node, and selects nodes for them to run on. Controller manager: Runs controller processes and reconciles the cluster‚Äôs actual state with its desired specifications.</description>
      
    </item>
    
    <item>
      <title>RabbitMQ Notes</title>
      <link>https://programmerraja.github.io/blog/notes/2023/rabbitmq/</link>
      <pubDate>Fri, 08 Dec 2023 18:26:15 +0530</pubDate>
      
      <guid>https://programmerraja.github.io/blog/notes/2023/rabbitmq/</guid>
      
      <description>Channel a channel is a separate communication channel within a single connection. Channels allow multiple concurrent exchanges to be executed in parallel, providing a way to separate different parts of your application.
Each channel has its own set of resources, such as queues, exchanges, and bindings, which are independent of the resources used by other channels in the same connection. This allows you to manage concurrency and improve performance by isolating different parts of your application into separate channels.</description>
      
    </item>
    
    <item>
      <title>Microservices</title>
      <link>https://programmerraja.github.io/blog/resources/2023/microservices/</link>
      <pubDate>Fri, 08 Dec 2023 18:20:29 +0530</pubDate>
      
      <guid>https://programmerraja.github.io/blog/resources/2023/microservices/</guid>
      
      <description>Communication https://youtu.be/6XTGcgt5clQ (Given overview of the wasys we can communicate sync/async) https://medium.com/javarevisited/microservices-communication-using-grpc-protocol-dc3a2f8b648d (GPRC) https://medium.com/cloud-native-daily/rethink-the-way-you-share-the-data-between-micro-services-with-change-data-capture-a666a4473388 [ about using data replication method ] https://medium.com/fiverr-engineering/how-to-share-data-between-microservices-on-high-scale-ab2bc663898d https://medium.com/@denhox/sharing-data-between-microservices-fe7fb9471208 https://medium.com/tinder/how-we-built-the-tinder-api-gateway-831c6ca5ceca tinder API gateway https://netflixtechblog.com/zero-configuration-service-mesh-with-on-demand-cluster-discovery-ac6483b52a51 [Zero Configuration Service Mesh with On-Demand Cluster Discovery https://youtu.be/4KQoYVX9lNM Authentication https://www.youtube.com/watch?v=SLc3cTlypwM This video about how to use JWT and how to secure
https://www.youtube.com/watch?v=ZjPF8yZ83Wo
https://medium.com/tech-tajawal/microservice-authentication-and-authorization-solutions-e0e5e74b248a
https://youtu.be/R6tUNpRpdnY notes How Netflix solve the auth problem using open policy agents
Open policy agent is open src</description>
      
    </item>
    
    <item>
      <title>Nodejs</title>
      <link>https://programmerraja.github.io/blog/resources/2023/nodejs/</link>
      <pubDate>Fri, 08 Dec 2023 18:20:29 +0530</pubDate>
      
      <guid>https://programmerraja.github.io/blog/resources/2023/nodejs/</guid>
      
      <description>Memory leaks https://dev.to/codux/experiments-with-the-javascript-garbage-collector-2ae3 (JavaScript provides a class called¬†FinalizationRegistry that allows you to programmatically detect when an object is garbage-collected.)
https://hacks.mozilla.org/2017/06/a-crash-course-in-memory-management/ (Crash course on memory management)
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management (A great article explainhow js manage memory)
https://www.useanvil.com/blog/engineering/isolating-memory-leak-in-node/
https://www.nearform.com/blog/tracking-memory-allocation-node-js/
https://deepu.tech/memory-management-in-programming/
https://felixgerschau.com/javascript-heap-out-of-memory-error/
https://felixgerschau.com/javascript-heap-out-of-memory-error/
https://www.cloudbees.com/blog/understanding-garbage-collection-in-node-js
https://developer.chrome.com/docs/devtools/ ‚Üícheck out how to use chrome memory profilrer
https://youtu.be/RJRbZdtKmxU
https://youtu.be/CRoR_0K586I
https://youtu.be/YDU_3WdfkxA
https://youtu.be/LaxbdIyBkL0
https://youtu.be/Hr2vrhrNaRo
https://blog.appsignal.com/2020/05/06/avoiding-memory-leaks-in-nodejs-best-practices-for-performance.html
https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/
An interesting kind of JavaScript memory leak
https://webkit.org/blog/12967/understanding-gc-in-jsc-from-scratch/ (Understanding Garbage Collection in JavaScriptCore From Scratch)</description>
      
    </item>
    
    <item>
      <title>Hello world</title>
      <link>https://programmerraja.github.io/blog/post/2023/helloworld/</link>
      <pubDate>Sun, 03 Dec 2023 09:44:50 +0530</pubDate>
      
      <guid>https://programmerraja.github.io/blog/post/2023/helloworld/</guid>
      
      <description>Hi, I&amp;rsquo;m K.Boopathi! üëã About Me I&amp;rsquo;m a passionate programmer with an insatiable curiosity for exploring diverse technologies and leveraging them to create cutting-edge products. My journey in the realm of tech is driven by a fervent desire to learn and innovate.
What I Do My blog is a reflection of my love for web development, offering insightful content, tutorials, and invaluable resources. I&amp;rsquo;m dedicated to sharing my knowledge and experiences, empowering aspiring developers to embark on their own coding adventures.</description>
      
    </item>
    
    <item>
      <title>Mongodb</title>
      <link>https://programmerraja.github.io/blog/resources/2023/mongo/</link>
      <pubDate>Sun, 03 Dec 2023 09:44:50 +0530</pubDate>
      
      <guid>https://programmerraja.github.io/blog/resources/2023/mongo/</guid>
      
      <description>MongoDB &amp;amp; Database MongoDB Architecture (internal)
MongoDB internal architecture MongoDB internal architecture MongoDB Storage Engine MongoDB Patterns
https://www.mongodb.com/blog/post/building-with-patterns-a-summary https://youtu.be/yuPjoC3jmPA https://mongoing.com/moutianlei .https://www.mongodb.com/blog/post/building-with-patterns-a-summary https://medium.com/@nirjalpaudel54312/mongodb-design-patterns-708100c07bcb Indexes
https://www.mongodb.com/docs/manual/indexes/ https://emptysqua.re/blog/optimizing-mongodb-compound-indexes/ https://www.alexbevi.com/blog/2020/05/16/optimizing-mongodb-compound-indexes-the-equality-sort-range-esr-rule/ https://medium.com/swlh/mongodb-indexes-deep-dive-understanding-indexes-9bcec6ed7aa6 https://emptysqua.re/blog/optimizing-mongodb-compound-indexes/ https://medium.com/@hnasr/index-seek-vs-index-scan-in-database-systems-641c2ac811fc ESR Rules for creating an index **MongoDB index principle ( a great article explain about indexes) Index fill factor https://dzone.com/articles/effective-mongodb-indexing-part-1 MongoDB Index Building on ReplicaSet and Shard Cluster https://betterprogramming.pub/the-mystery-of-mongodb-indexing-af61766647dc (tell about ESR rule and how to split combo index to increase performance) https://betterprogramming.</description>
      
    </item>
    
    <item>
      <title>MongoDB Performance Tuning Book Notes</title>
      <link>https://programmerraja.github.io/blog/notes/2023/mongodb-performance-tuning/</link>
      <pubDate>Sun, 03 Dec 2023 09:44:50 +0530</pubDate>
      
      <guid>https://programmerraja.github.io/blog/notes/2023/mongodb-performance-tuning/</guid>
      
      <description>if the write concern is set to ‚Äúmajority‚Äù, then the database will not complete the write operation until a majority of secondaries
receive the write. We can also set the write concern to wait until all
secondaries or a specific number of secondaries receive the write
operation.
Oplog ‚ÜíThe primary node stores information about document changes in a collection within its local database called the Oplog. The primary will continuously attempt to apply these</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://programmerraja.github.io/blog/template/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://programmerraja.github.io/blog/template/template/</guid>
      
      <description></description>
      
    </item>
    
  </channel>
</rss>
